
// let functionList = [loadProfileSection];

// let functionName = element.dataset.callback
// .then(()=>searchFunction(functionName,functionList))

// async function loadProfileSection(){
//   console.log("Profile");
// }



//Función que busca en una lista de funciones la función a ejecutar
function searchFunction(functionName, functionList) {
  for (let functionItem of functionList) {
    if (functionItem.name == functionName) {
      functionItem();
      break;
    }
  }
}
	
		if (initialItemToShow <= 0) {
		let amountToAdd = initialItemToShow * (-1) + 1;
		initialItemToShow = amountToAdd;
		let finalItemToShow;
		// do {
		// 	finalItemToShow += 1;
		// 	amountToAdd--;
		// } while (amountOfPages > finalItemToShow || amountToAdd > 0);
	}
	// if (finalItemToShow > amountOfPages) {
	// 	let amountToAdd = finalItemToShow - amountOfPages - 1;
	// 	finalItemToShow -= amountToAdd + 1;
	// 	let initialItemToShow;
	// 	do {
	// 		initialItemToShow += 1;
	// 		amountToAdd--;
	// 	} while (initialItemToShow > 1 || amountToAdd > 0);
	// }

export async function deleteFormInformation(e) {
	try {
		formOperation('delete', e)
	} catch (error) {
		console.log('error ' + error);
	}
}

export function fillCards() {
	//Llena una tarjeta con informacion de la base de datos 
	try {
		const cardContainers = document.querySelectorAll(".cardContainer");
		// Recorro todos los cardContainers y obtengo el template del que tengo que rellenar y poner en ese contenedor
		cardContainers.forEach(cardContainer => {
			// cardContainer.innerHTML = '';
			const tpl = document.querySelectorAll(cardContainer.dataset.tpl).content;
			//De ese template saco el archivo al que va a hacer la operacion a la base de datos junto con el id necesario para la consulta 
			const fragment = document.createDocumentFragment();
			const file = cardContainer.dataset.file;
			const id = cardContainer.dataset.id;
			const dataForm = new FormData();
			if (id) dataForm.append('id', id);
			if (typeof file === 'undefined') throw 'No hay archivo para buscar la data';
			databaseOperation('get', file, dataForm).then((data) => {
				if (data['db'] === undefined) throw 'No hay data';
				const databaseInformation = Object.entries(data.db);
				//Cuando obtiene la informacion de la bd busca un elemento con el cual coincida la clase de este con el alias de la columna de la informacion obtenida  y le coloca la informacion obtenida
				for (const [key, data] of databaseInformation) {
					const tplElement = tpl.querySelector(`.${data[key]}`);
					if (tplElement) tplElement.textContent = data[key];
					const clone = tpl.cloneNode(true);
					fragment.appendChild(clone);
				}
			});
			cardContainer.appendChild(fragment);
		})
	} catch (error) {
		console.log('error ' + error);
	}
}

// Reviso si ya existen cookies 
if (isset($_COOKIE['cuil']) && isset($_COOKIE['password'])) {
  $cuil =  $_COOKIE['cuil'];
  $password =  $_COOKIE['password'];
  $result = loginUser($cuil, $password);
  if ($result->num_rows == 1) {
    $_SESSION['cuil'] = $cuil;
    header("location: ../../../i.php");
    exit();
  }
}

if (isset($_POST['rememberMe'])) {
        setcookie("cuil", $cuil, time() + (+60 * 60 * 24 * 30 * 365));
        setcookie("password", $password, time() + (+60 * 60 * 24 * 30 * 365));
    } else {
        setcookie("cuil", "");
        setcookie("password", "");
    }

}
